import { PrismaClient } from '@prisma/client';
import { WPXMLImporter } from '../src/lib/wp-import';

const prisma = new PrismaClient();

async function testVariantsSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏:');
    const productsWithVariants = await prisma.product.findMany({
      where: {
        variants: {
          some: {}
        }
      },
      include: {
        variants: true,
        categoryObj: true
      },
      take: 5
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏: ${productsWithVariants.length}`);
    
    productsWithVariants.forEach(product => {
      console.log(`\nüì¶ –¢–æ–≤–∞—Ä: ${product.title}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryObj?.name}`);
      console.log(`   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.price} —Ä—É–±.`);
      console.log(`   –í–∞—Ä–∏–∞—Ü–∏–∏ (${product.variants.length}):`);
      
      product.variants.forEach(variant => {
        console.log(`     - ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} | ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} | ${variant.price} —Ä—É–±. | –°–∫–ª–∞–¥: ${variant.stock}`);
      });
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—Ä–∏–∞—Ü–∏–π
    console.log('\n2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–π:');
    const totalVariants = await prisma.productVariant.count();
    const activeVariants = await prisma.productVariant.count({
      where: { isActive: true }
    });
    const variantsWithColor = await prisma.productVariant.count({
      where: { color: { not: null } }
    });
    const variantsWithSize = await prisma.productVariant.count({
      where: { size: { not: null } }
    });

    console.log(`   –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariants}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: ${activeVariants}`);
    console.log(`   –° —Ü–≤–µ—Ç–æ–º: ${variantsWithColor}`);
    console.log(`   –° —Ä–∞–∑–º–µ—Ä–æ–º: ${variantsWithSize}`);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã
    console.log('\n3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:');
    const uniqueColors = await prisma.productVariant.findMany({
      where: { color: { not: null } },
      select: { color: true },
      distinct: ['color']
    });
    
    const uniqueSizes = await prisma.productVariant.findMany({
      where: { size: { not: null } },
      select: { size: true },
      distinct: ['size']
    });

    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (${uniqueColors.length}): ${uniqueColors.map(c => c.color).join(', ')}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (${uniqueSizes.length}): ${uniqueSizes.map(s => s.size).join(', ')}`);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º:');
    
    if (uniqueColors.length > 0) {
      const firstColor = uniqueColors[0].color;
      const productsWithColor = await prisma.product.findMany({
        where: {
          variants: {
            some: { color: firstColor }
          }
        },
        include: { variants: true }
      });
      console.log(`   –¢–æ–≤–∞—Ä—ã —Å —Ü–≤–µ—Ç–æ–º "${firstColor}": ${productsWithColor.length}`);
    }

    if (uniqueSizes.length > 0) {
      const firstSize = uniqueSizes[0].size;
      const productsWithSize = await prisma.product.findMany({
        where: {
          variants: {
            some: { size: firstSize }
          }
        },
        include: { variants: true }
      });
      console.log(`   –¢–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º "${firstSize}": ${productsWithSize.length}`);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:');
    
    const invalidVariants = await prisma.productVariant.findMany({
      where: {
        OR: [
          { price: { lte: 0 } },
          { stock: { lt: 0 } },
          { sku: { equals: '' } }
        ]
      }
    });

    if (invalidVariants.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏: ${invalidVariants.length}`);
      invalidVariants.forEach(variant => {
        console.log(`     - ID: ${variant.id}, SKU: ${variant.sku}, –¶–µ–Ω–∞: ${variant.price}, –°–∫–ª–∞–¥: ${variant.stock}`);
      });
    } else {
      console.log('   ‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏:');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π XML —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    const testXml = `
    <rss>
      <channel>
        <item>
          <title><![CDATA[–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ]]></title>
          <wp:post_id>9999</wp:post_id>
          <wp:post_type>product</wp:post_type>
          <wp:status>publish</wp:status>
          <category domain="product_cat" nicename="test"><![CDATA[–¢–µ—Å—Ç]]></category>
          <category domain="pa_cvet" nicename="–∫—Ä–∞—Å–Ω—ã–π"><![CDATA[–ö—Ä–∞—Å–Ω—ã–π]]></category>
          <category domain="pa_razmer" nicename="50x90"><![CDATA[50x90]]></category>
          <wp:postmeta><wp:meta_key><![CDATA[_sku]]></wp:meta_key><wp:meta_value><![CDATA[TEST-001]]></wp:meta_value></wp:postmeta>
          <wp:postmeta><wp:meta_key><![CDATA[_price]]></wp:meta_key><wp:meta_value><![CDATA[150]]></wp:meta_value></wp:postmeta>
          <wp:postmeta><wp:meta_key><![CDATA[_stock]]></wp:meta_key><wp:meta_value><![CDATA[10]]></wp:meta_value></wp:postmeta>
        </item>
      </channel>
    </rss>`;

    const importer = new WPXMLImporter();
    const result = await importer.importFromXML(testXml, {
      updateExisting: true,
      autoCreateCategories: true
    });

    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:`);
    console.log(`     - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
    console.log(`     - –°–æ–∑–¥–∞–Ω–æ: ${result.created}`);
    console.log(`     - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
    console.log(`     - –û—à–∏–±–∫–∏: ${result.errors.length}`);
    console.log(`     - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`);

    if (result.warnings.length > 0) {
      console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:`);
      result.warnings.forEach(warning => console.log(`     - ${warning}`));
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testVariantsSystem();