import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testVariants() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    const product = await prisma.product.findFirst({
      include: {
        variants: {
          where: { isActive: true },
          orderBy: { price: 'asc' },
        },
        categoryObj: true,
      },
    });

    if (!product) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ seed —Å–∫—Ä–∏–ø—Ç —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    console.log(`\nüì¶ –¢–æ–≤–∞—Ä: ${product.title}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryObj.name}`);
    console.log(`üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.price} ‚ÇΩ`);
    console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${product.stock}`);

    if (product.variants.length === 0) {
      console.log('‚ö†Ô∏è –£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
      return;
    }

    console.log(`\nüé® –í–∞—Ä–∏–∞–Ω—Ç—ã (${product.variants.length}):`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–≤–µ—Ç–∞–º
    const colors = [...new Set(product.variants.map(v => v.color).filter(Boolean))];
    const sizes = [...new Set(product.variants.map(v => v.size).filter(Boolean))];

    console.log(`\nüé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: ${colors.join(', ')}`);
    console.log(`üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${sizes.join(', ')}`);

    console.log('\nüìã –î–µ—Ç–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:');
    product.variants.forEach((variant, index) => {
      console.log(`${index + 1}. ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} / ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} - ${variant.price} ‚ÇΩ (${variant.stock} —à—Ç.)`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const testVariant = product.variants[0];
    if (testVariant) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞:`);
      console.log(`–ò—â–µ–º: —Ü–≤–µ—Ç="${testVariant.color}", —Ä–∞–∑–º–µ—Ä="${testVariant.size}"`);
      
      const foundVariant = product.variants.find(v => 
        v.color === testVariant.color && v.size === testVariant.size
      );
      
      if (foundVariant) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${foundVariant.sku} - ${foundVariant.price} ‚ÇΩ`);
      } else {
        console.log(`‚ùå –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
    const minPrice = Math.min(...product.variants.map(v => Number(v.price)));
    const maxPrice = Math.max(...product.variants.map(v => Number(v.price)));
    const basePrice = Number(product.price);

    console.log(`\nüí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:`);
    console.log(`–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${basePrice} ‚ÇΩ`);
    console.log(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${minPrice} ‚ÇΩ`);
    console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${maxPrice} ‚ÇΩ`);
    
    if (minPrice !== basePrice || maxPrice !== basePrice) {
      console.log(`‚úÖ –¶–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã`);
    } else {
      console.log(`‚ö†Ô∏è –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ—é—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
    const inStockVariants = product.variants.filter(v => v.stock > 0);
    const outOfStockVariants = product.variants.filter(v => v.stock === 0);

    console.log(`\nüì¶ –ù–∞–ª–∏—á–∏–µ:`);
    console.log(`–í –Ω–∞–ª–∏—á–∏–∏: ${inStockVariants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
    console.log(`–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: ${outOfStockVariants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);

    if (outOfStockVariants.length > 0) {
      console.log(`\n‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –Ω–∞–ª–∏—á–∏—è:`);
      outOfStockVariants.forEach(v => {
        console.log(`- ${v.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} / ${v.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} (${v.sku})`);
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVariants();

