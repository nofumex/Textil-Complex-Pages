import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkImportedProducts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    const productsWithVariants = await prisma.product.findMany({
      where: {
        variants: {
          some: {},
        },
      },
      include: {
        variants: {
          orderBy: [
            { color: 'asc' },
            { size: 'asc' },
          ],
        },
        categoryObj: true,
      },
      take: 5, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
    });

    console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏: ${productsWithVariants.length}`);

    for (const product of productsWithVariants) {
      console.log(`\nüè∑Ô∏è –¢–æ–≤–∞—Ä: ${product.title}`);
      console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryObj.name}`);
      console.log(`üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.price} ‚ÇΩ`);
      console.log(`üì¶ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${product.stock}`);
      console.log(`üé® –í–∞—Ä–∏–∞—Ü–∏–π: ${product.variants.length}`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ü–≤–µ—Ç–∞–º
      const colors = Array.from(new Set(product.variants.map(v => v.color).filter(Boolean)));
      const sizes = Array.from(new Set(product.variants.map(v => v.size).filter(Boolean)));

      console.log(`   –¶–≤–µ—Ç–∞: ${colors.join(', ')}`);
      console.log(`   –†–∞–∑–º–µ—Ä—ã: ${sizes.join(', ')}`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞—Ü–∏–π
      console.log(`   –ü—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π:`);
      product.variants.slice(0, 3).forEach((variant, index) => {
        console.log(`     ${index + 1}. ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} / ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} - ${variant.price} ‚ÇΩ (${variant.stock} —à—Ç.)`);
      });

      if (product.variants.length > 3) {
        console.log(`     ... –∏ –µ—â—ë ${product.variants.length - 3} –≤–∞—Ä–∏–∞—Ü–∏–π`);
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º
    const totalVariants = await prisma.productVariant.count();
    const activeVariants = await prisma.productVariant.count({
      where: { isActive: true },
    });

    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariants}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: ${activeVariants}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º –∏ —Ä–∞–∑–º–µ—Ä–∞–º
    const colorStats = await prisma.productVariant.groupBy({
      by: ['color'],
      _count: { color: true },
      where: { color: { not: null } },
      orderBy: { _count: { color: 'desc' } },
      take: 5,
    });

    const sizeStats = await prisma.productVariant.groupBy({
      by: ['size'],
      _count: { size: true },
      where: { size: { not: null } },
      orderBy: { _count: { size: 'desc' } },
      take: 5,
    });

    console.log(`\nüé® –¢–æ–ø-5 —Ü–≤–µ—Ç–æ–≤:`);
    colorStats.forEach((stat, index) => {
      console.log(`   ${index + 1}. ${stat.color}: ${stat._count.color} –≤–∞—Ä–∏–∞—Ü–∏–π`);
    });

    console.log(`\nüìè –¢–æ–ø-5 —Ä–∞–∑–º–µ—Ä–æ–≤:`);
    sizeStats.forEach((stat, index) => {
      console.log(`   ${index + 1}. ${stat.size}: ${stat._count.size} –≤–∞—Ä–∏–∞—Ü–∏–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkImportedProducts();
