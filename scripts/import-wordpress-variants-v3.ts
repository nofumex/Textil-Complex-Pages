import { PrismaClient } from '@prisma/client';
import { WPVariantsImporterV3 } from '../src/lib/wp-variants-import-v3';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function importWordPressVariantsV3() {
  console.log('üì• –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –∏–∑ WordPress XML (v3)...\n');

  try {
    // –ò—â–µ–º XML —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    const xmlFiles = [
      'WordPress.2025-10-07.xml',
      'WordPress.2025-10-07 (1).xml'
    ].filter(file => fs.existsSync(file));

    if (xmlFiles.length === 0) {
      console.log('‚ùå XML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã WordPress.2025-10-07.xml –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ XML —Ñ–∞–π–ª–æ–≤: ${xmlFiles.length}`);
    xmlFiles.forEach(file => console.log(`  - ${file}`));

    // –ß–∏—Ç–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    const importer = new WPVariantsImporterV3();
    let totalProcessed = 0;
    let totalCreated = 0;
    let totalUpdated = 0;
    let totalVariantsCreated = 0;
    const allErrors: string[] = [];
    const allWarnings: string[] = [];

    for (const xmlFile of xmlFiles) {
      console.log(`\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${xmlFile}`);
      
      try {
        const xmlContent = fs.readFileSync(xmlFile, 'utf-8');
        const result = await importer.importFromXML(xmlContent, {
          updateExisting: true,
          autoCreateCategories: true,
          defaultCurrency: 'RUB',
          createAllVariants: true
        });

        totalProcessed += result.processed;
        totalCreated += result.created;
        totalUpdated += result.updated;
        totalVariantsCreated += result.variantsCreated;
        allErrors.push(...result.errors);
        allWarnings.push(...result.warnings);

        console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${result.created}`);
        console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
        console.log(`  üé® –°–æ–∑–¥–∞–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${result.variantsCreated}`);
        console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∏: ${result.errors.length}`);
        console.log(`  ‚ÑπÔ∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`);

      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${xmlFile}:`, error);
        allErrors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${xmlFile}: ${error}`);
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`  üì¶ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProcessed}`);
    console.log(`  ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${totalCreated}`);
    console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${totalUpdated}`);
    console.log(`  üé® –°–æ–∑–¥–∞–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariantsCreated}`);
    console.log(`  ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${allErrors.length}`);
    console.log(`  ‚ö†Ô∏è  –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${allWarnings.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (allErrors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      allErrors.slice(0, 10).forEach(error => console.log(`  - ${error}`));
      if (allErrors.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${allErrors.length - 10} –æ—à–∏–±–æ–∫`);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (allWarnings.length > 0) {
      console.log('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      allWarnings.slice(0, 10).forEach(warning => console.log(`  - ${warning}`));
      if (allWarnings.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${allWarnings.length - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    
    const productsWithVariants = await prisma.product.count({
      where: {
        variants: {
          some: {}
        }
      }
    });

    const totalVariants = await prisma.productVariant.count();
    const activeVariants = await prisma.productVariant.count({
      where: { isActive: true }
    });

    console.log(`  üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏: ${productsWithVariants}`);
    console.log(`  üé® –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariants}`);
    console.log(`  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: ${activeVariants}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
    const sampleVariants = await prisma.productVariant.findMany({
      take: 5,
      include: {
        product: {
          select: {
            title: true,
            sku: true
          }
        }
      }
    });

    if (sampleVariants.length > 0) {
      console.log('\nüé® –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π:');
      sampleVariants.forEach(variant => {
        console.log(`  - ${variant.product.title} | ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} | ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} | ${variant.price} —Ä—É–±. | ${variant.sku}`);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –≤–∞—Ä–∏–∞—Ü–∏–π
    const productsWithPriceVariations = await prisma.product.findMany({
      where: {
        variants: {
          some: {
            price: {
              not: undefined
            }
          }
        }
      },
      include: {
        variants: {
          select: {
            color: true,
            size: true,
            price: true,
            sku: true
          }
        }
      },
      take: 3
    });

    if (productsWithPriceVariations.length > 0) {
      console.log('\nüí∞ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –≤–∞—Ä–∏–∞—Ü–∏–π:');
      productsWithPriceVariations.forEach(product => {
        console.log(`  üì¶ ${product.title}:`);
        product.variants.forEach(variant => {
          console.log(`    - ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'}: ${variant.price} —Ä—É–±. (${variant.sku})`);
        });
      });
    }

    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importWordPressVariantsV3();
