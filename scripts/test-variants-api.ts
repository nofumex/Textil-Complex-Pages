import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testVariantsAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    const product = await prisma.product.findFirst({
      where: {
        variants: {
          some: {}
        }
      },
      include: {
        variants: {
          where: { isActive: true },
          take: 5
        }
      }
    });

    if (!product) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä: ${product.title}`);
    console.log(`üÜî ID —Ç–æ–≤–∞—Ä–∞: ${product.id}`);
    console.log(`üîó Slug —Ç–æ–≤–∞—Ä–∞: ${product.slug}`);
    console.log(`üé® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${product.variants.length}\n`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/products/[slug]/variations');
    try {
      const response = await fetch(`http://localhost:3000/api/products/${product.slug}/variations`);
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏:');
        console.log(`  - –¶–≤–µ—Ç–∞: ${data.colors.join(', ')}`);
        console.log(`  - –†–∞–∑–º–µ—Ä—ã: ${data.sizes.join(', ')}`);
        console.log(`  - –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: ${data.combinations.length}`);
        console.log(`  - –ï—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏: ${data.hasVariations}\n`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error}`);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
    if (product.variants.length > 0) {
      const variant = product.variants[0];
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/products/[slug]/variation`);
      console.log(`  - –¶–≤–µ—Ç: ${variant.color || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`  - –†–∞–∑–º–µ—Ä: ${variant.size || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      try {
        const params = new URLSearchParams();
        if (variant.color) params.append('color', variant.color);
        if (variant.size) params.append('size', variant.size);
        
        const response = await fetch(`http://localhost:3000/api/products/${product.slug}/variation?${params}`);
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è:');
          console.log(`  - –¶–µ–Ω–∞: ${data.price} —Ä—É–±.`);
          console.log(`  - SKU: ${data.sku}`);
          console.log(`  - –ù–∞–ª–∏—á–∏–µ: ${data.stock}`);
          console.log(`  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${data.image ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
          console.log(`  - –ê–∫—Ç–∏–≤–Ω–∞: ${data.isActive}\n`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error}`);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π
    console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞:');
    product.variants.forEach((variant, index) => {
      console.log(`  ${index + 1}. ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} | ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} | ${variant.price} —Ä—É–±. | ${variant.sku}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testVariantsAPI();