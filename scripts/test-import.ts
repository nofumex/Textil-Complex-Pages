import { ImportService } from '../src/lib/import-service';
import * as fs from 'fs';
import * as path from 'path';

async function testImport() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–º–ø–æ—Ä—Ç–∞...');
  
  try {
    const importService = new ImportService();
    
    // –ß–∏—Ç–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    const zipPath = path.join(process.cwd(), 'export-test.zip');
    
    if (!fs.existsSync(zipPath)) {
      console.error('‚ùå –§–∞–π–ª export-test.zip –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ test-export.ts');
      return;
    }
    
    console.log('üì¶ –ß–∏—Ç–∞–µ–º ZIP –∞—Ä—Ö–∏–≤...');
    const zipBuffer = fs.readFileSync(zipPath);
    
    // –û–ø—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
    const options = {
      updateExisting: true, // –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
      skipExisting: false, // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
      importMedia: true,    // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    };
    
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç...');
    const result = await importService.importData(zipBuffer, options);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed.products}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed.categories}`);
    console.log(`üñºÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed.media}`);
    
    if (result.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      result.errors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (result.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      result.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
    
    if (result.skipped.products.length > 0) {
      console.log('\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:');
      result.skipped.products.forEach(product => console.log(`  - ${product}`));
    }
    
    if (result.skipped.categories.length > 0) {
      console.log('\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      result.skipped.categories.forEach(category => console.log(`  - ${category}`));
    }
    
    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞:', error);
  }
}

if (require.main === module) {
  testImport();
}

export default testImport;
