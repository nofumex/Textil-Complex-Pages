import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();

async function testAPIWithAuth() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');

  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@textilcomplex.ru' },
    });

    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup-admin-and-import.ts —Å–Ω–∞—á–∞–ª–∞.');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${admin.email}`);

    // 2. –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
    const token = jwt.sign(
      { 
        userId: admin.id, 
        email: admin.email, 
        role: admin.role 
      },
      JWT_SECRET,
      { expiresIn: '1h' }
    );

    console.log('üîë JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    const baseUrl = 'http://localhost:3000';
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    };

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('\nüì¶ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
    try {
      const response = await fetch(`${baseUrl}/api/admin/products`, {
        headers,
      });
      const result = await response.json();
      
      if (result.success) {
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.data.length}`);
        console.log(`   üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.pagination.page} –∏–∑ ${result.pagination.pages}`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      } else {
        console.log(`   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      }
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    console.log('\nüé® –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏...');
    try {
      const productWithVariants = await prisma.product.findFirst({
        where: {
          variants: {
            some: {},
          },
        },
        include: {
          variants: true,
        },
      });

      if (productWithVariants) {
        const response = await fetch(`${baseUrl}/api/admin/products/${productWithVariants.slug}/variants`, {
          headers,
        });
        const result = await response.json();
        
        if (result.success) {
          console.log(`   ‚úÖ –¢–æ–≤–∞—Ä: ${productWithVariants.title}`);
          console.log(`   üé® –í–∞—Ä–∏–∞—Ü–∏–π: ${result.data.length}`);
          result.data.slice(0, 3).forEach((variant: any, index: number) => {
            console.log(`     ${index + 1}. ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} / ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} - ${variant.price} ‚ÇΩ`);
          });
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      } else {
        console.log(`   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      }
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
    console.log('\n‚ûï –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏...');
    try {
      const productWithVariants = await prisma.product.findFirst({
        where: {
          variants: {
            some: {},
          },
        },
      });

      if (productWithVariants) {
        const newVariant = {
          size: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä',
          color: '–¢–µ—Å—Ç–æ–≤—ã–π —Ü–≤–µ—Ç',
          material: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª',
          price: 999.99,
          stock: 5,
          sku: `TEST-${Date.now()}`,
          isActive: true,
        };

        const response = await fetch(`${baseUrl}/api/admin/products/${productWithVariants.slug}/variants`, {
          method: 'POST',
          headers,
          body: JSON.stringify(newVariant),
        });
        const result = await response.json();
        
        if (result.success) {
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è: ${newVariant.color} / ${newVariant.size}`);
          console.log(`   üí∞ –¶–µ–Ω–∞: ${newVariant.price} ‚ÇΩ`);
          console.log(`   üì¶ –û—Å—Ç–∞—Ç–æ–∫: ${newVariant.stock} —à—Ç.`);
          
          await prisma.productVariant.delete({
            where: { id: result.data.id },
          });
          console.log('   üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      } else {
        console.log(`   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      }
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API —Ç–æ–≤–∞—Ä–∞
    console.log('\nüåê –¢–µ—Å—Ç 4: –ü—É–±–ª–∏—á–Ω—ã–π API —Ç–æ–≤–∞—Ä–∞...');
    try {
      const productWithVariants = await prisma.product.findFirst({
        where: {
          variants: {
            some: {},
          },
          isActive: true,
          visibility: 'VISIBLE',
        },
      });

      if (productWithVariants) {
        const response = await fetch(`${baseUrl}/api/products/${productWithVariants.slug}`);
        const result = await response.json();
        
        if (result.success) {
          console.log(`   ‚úÖ –¢–æ–≤–∞—Ä: ${result.data.title}`);
          console.log(`   üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${result.data.price} ‚ÇΩ`);
          console.log(`   üé® –í–∞—Ä–∏–∞—Ü–∏–π: ${result.data.variants.length}`);
          console.log(`   üì¶ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${result.data.stock} —à—Ç.`);
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      } else {
        console.log(`   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('   ‚Ä¢ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('   ‚Ä¢ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('   ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏');

  } catch (error: unknown) {
    if (error instanceof Error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAPIWithAuth();
