import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkImportedData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      include: {
        products: {
          include: {
            variants: true
          }
        }
      }
    });
    
    console.log(`\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (${categories.length}):`);
    categories.forEach(category => {
      console.log(`  - ${category.name} (${category.products.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      include: {
        variants: true,
        categoryObj: true
      }
    });
    
    console.log(`\nüì¶ –¢–æ–≤–∞—Ä—ã (${products.length}):`);
    products.slice(0, 5).forEach(product => {
      console.log(`  - ${product.title}`);
      console.log(`    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryObj?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`);
      console.log(`    –¶–µ–Ω–∞: ${product.price} ${product.currency}`);
      console.log(`    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${product.images.length}`);
      console.log(`    –í–∞—Ä–∏–∞–Ω—Ç—ã: ${product.variants.length}`);
      if (product.variants.length > 0) {
        console.log(`    –í–∞—Ä–∏–∞–Ω—Ç—ã:`);
        product.variants.slice(0, 3).forEach(variant => {
          console.log(`      - ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} (${variant.price} —Ä—É–±.)`);
        });
      }
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    const variants = await prisma.productVariant.findMany({
      include: {
        product: true
      }
    });
    
    console.log(`\nüé® –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ (${variants.length}):`);
    variants.slice(0, 5).forEach(variant => {
      console.log(`  - ${variant.product.title}`);
      console.log(`    –¶–≤–µ—Ç: ${variant.color || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`    –†–∞–∑–º–µ—Ä: ${variant.size || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`    –¶–µ–Ω–∞: ${variant.price} —Ä—É–±.`);
      console.log(`    –û—Å—Ç–∞—Ç–æ–∫: ${variant.stock} —à—Ç.`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ uploads
    const fs = require('fs');
    const path = require('path');
    const uploadsPath = path.join(process.cwd(), 'public', 'uploads');
    
    if (fs.existsSync(uploadsPath)) {
      const files = fs.readdirSync(uploadsPath);
      console.log(`\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ uploads (${files.length}):`);
      // @ts-ignore
files.slice(0, 10).forEach(file => {
  console.log(`  - ${file}`);
});

      if (files.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${files.length - 10} —Ñ–∞–π–ª–æ–≤`);
      }
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  checkImportedData();
}

export default checkImportedData;
