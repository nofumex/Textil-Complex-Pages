import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanVariantColors() {
  console.log('üßπ –û—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –≤–∞—Ä–∏–∞—Ü–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    const variantsWithBadColors = await prisma.productVariant.findMany({
      where: {
        OR: [
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω—ã–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω—ã–µ', mode: 'insensitive' } },
        ],
      },
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏: ${variantsWithBadColors.length}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ü–≤–µ—Ç –≤ null
    const result = await prisma.productVariant.updateMany({
      where: {
        OR: [
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω—ã–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω—ã–µ', mode: 'insensitive' } },
        ],
      },
      data: {
        color: null,
      },
    });

    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤: ${result.count}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    const colorStats = await prisma.productVariant.groupBy({
      by: ['color'],
      _count: { color: true },
      where: { color: { not: null } },
      orderBy: { _count: { color: 'desc' } },
      take: 10,
    });

    console.log(`\nüé® –¢–æ–ø-10 —Ü–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:`);
    colorStats.forEach((stat, index) => {
      console.log(`   ${index + 1}. ${stat.color}: ${stat._count.color} –≤–∞—Ä–∏–∞—Ü–∏–π`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π –±–µ–∑ —Ü–≤–µ—Ç–∞
    const variantsWithoutColor = await prisma.productVariant.count({
      where: { color: null },
    });

    console.log(`\nüìä –í–∞—Ä–∏–∞—Ü–∏–π –±–µ–∑ —Ü–≤–µ—Ç–∞: ${variantsWithoutColor}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ü–≤–µ—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanVariantColors();

