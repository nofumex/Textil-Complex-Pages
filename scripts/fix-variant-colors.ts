import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixVariantColors() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –≤–∞—Ä–∏–∞—Ü–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    const variantsWithBadColors = await prisma.productVariant.findMany({
      where: {
        OR: [
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–ø–µ—Å—Ç—Ä–æ—Ç–∫–∞–Ω—ã–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω–æ–µ', mode: 'insensitive' } },
          { color: { contains: '–≥–ª–∞–¥–∫–æ–∫—Ä–∞—à–µ–Ω—ã–µ', mode: 'insensitive' } },
        ],
      },
      include: {
        product: true,
      },
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞—Ü–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏: ${variantsWithBadColors.length}`);

    let fixedCount = 0;
    let skippedCount = 0;

    for (const variant of variantsWithBadColors) {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        let newColor: string | null = null;

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        const productTitle = variant.product.title.toLowerCase();
        
        // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        const possibleColors = [
          '–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π', '–∂–µ–ª—Ç—ã–π', '—Ä–æ–∑–æ–≤—ã–π', 
          '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–∂–µ–≤—ã–π', '–≥–æ–ª—É–±–æ–π',
          '—Å–∏—Ä–µ–Ω–µ–≤—ã–π', '—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π', '—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π', '–∫—Ä–µ–º–æ–≤—ã–π', '–±–æ—Ä–¥–æ–≤—ã–π'
        ];

        // –ò—â–µ–º —Ü–≤–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        for (const color of possibleColors) {
          if (productTitle.includes(color)) {
            newColor = color;
            break;
          }
        }

        // –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º null
        if (!newColor) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é ${variant.sku} - —Ü–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`);
          skippedCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é
        await prisma.productVariant.update({
          where: { id: variant.id },
          data: { color: newColor },
        });

        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è ${variant.sku}: "${variant.color}" ‚Üí "${newColor}"`);
        fixedCount++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ ${variant.sku}:`, error);
        skippedCount++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
    console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const colorStats = await prisma.productVariant.groupBy({
      by: ['color'],
      _count: { color: true },
      where: { color: { not: null } },
      orderBy: { _count: { color: 'desc' } },
      take: 10,
    });

    console.log(`\nüé® –¢–æ–ø-10 —Ü–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
    colorStats.forEach((stat, index) => {
      console.log(`   ${index + 1}. ${stat.color}: ${stat._count.color} –≤–∞—Ä–∏–∞—Ü–∏–π`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixVariantColors();

