import { PrismaClient } from '@prisma/client';
import { WPXMLImporter } from '../src/lib/wp-import';
import fs from 'fs';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function setupAdminAndImport() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∞ –∏ –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      const hashedPassword = await bcrypt.hash('admin123', 10);
      
      const admin = await prisma.user.create({
        data: {
          email: 'admin@textil-complex.ru',
          password: hashedPassword,
          firstName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          lastName: '–°–∏—Å—Ç–µ–º—ã',
          role: 'ADMIN',
          isBlocked: false
        }
      });

      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:');
      console.log(`   Email: ${admin.email}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: admin123`);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    const categories = [
      { name: '–ü–æ–ª–æ—Ç–µ–Ω—Ü–∞', slug: 'polotenca' },
      { name: '–ü–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ', slug: 'postelnoe-bele' },
      { name: '–°–∫–∞—Ç–µ—Ä—Ç–∏', slug: 'skaterti' },
      { name: '–®—Ç–æ—Ä—ã', slug: 'shtory' },
      { name: '–ö–æ–≤—Ä—ã', slug: 'kovry' }
    ];

    for (const catData of categories) {
      const existing = await prisma.category.findUnique({
        where: { slug: catData.slug }
      });

      if (!existing) {
        await prisma.category.create({
          data: catData
        });
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${catData.name}`);
      } else {
        console.log(`   ‚ÑπÔ∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${catData.name}`);
      }
    }

    // 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ XML
    console.log('\n3. –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WordPress XML...');
    
    const xmlFiles = [
      'WordPress.2025-10-07.xml',
      'WordPress.2025-10-07 (1).xml'
    ].filter(file => fs.existsSync(file));

    if (xmlFiles.length === 0) {
      console.log('‚ö†Ô∏è  XML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç.');
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ XML —Ñ–∞–π–ª–æ–≤: ${xmlFiles.length}`);
      
      const importer = new WPXMLImporter();
      let totalProcessed = 0;
      let totalCreated = 0;
      let totalUpdated = 0;

      for (const xmlFile of xmlFiles) {
        console.log(`\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${xmlFile}`);
        
        try {
          const xmlContent = fs.readFileSync(xmlFile, 'utf-8');
          const result = await importer.importFromXML(xmlContent, {
            updateExisting: true,
            autoCreateCategories: true,
            defaultCurrency: 'RUB'
          });

          totalProcessed += result.processed;
          totalCreated += result.created;
          totalUpdated += result.updated;

          console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${result.created}`);
          console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
          console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∏: ${result.errors.length}`);
          console.log(`   ‚ÑπÔ∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`);

          if (result.errors.length > 0) {
            console.log('   –û—à–∏–±–∫–∏:');
            result.errors.slice(0, 3).forEach(error => console.log(`     - ${error}`));
          }

        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${xmlFile}:`, error);
        }
      }

      console.log(`\nüìä –ò—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:`);
      console.log(`   üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProcessed}`);
      console.log(`   ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: ${totalCreated}`);
      console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${totalUpdated}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    const totalProducts = await prisma.product.count();
    const productsWithVariants = await prisma.product.count({
      where: {
        variants: {
          some: {}
        }
      }
    });
    const totalVariants = await prisma.productVariant.count();
    const activeVariants = await prisma.productVariant.count({
      where: { isActive: true }
    });

    console.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    console.log(`   üé® –¢–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏: ${productsWithVariants}`);
    console.log(`   üîß –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π: ${totalVariants}`);
    console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: ${activeVariants}`);

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    if (productsWithVariants > 0) {
      console.log('\n5. –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏:');
      
      const sampleProducts = await prisma.product.findMany({
        where: {
          variants: {
            some: {}
          }
        },
        include: {
          variants: {
            take: 3
          },
          categoryObj: true
        },
        take: 3
      });

      sampleProducts.forEach(product => {
        console.log(`\nüì¶ ${product.title}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryObj?.name}`);
        console.log(`   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.price} —Ä—É–±.`);
        console.log(`   –í–∞—Ä–∏–∞—Ü–∏–∏:`);
        
        product.variants.forEach(variant => {
          console.log(`     - ${variant.color || '–ë–µ–∑ —Ü–≤–µ—Ç–∞'} | ${variant.size || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'} | ${variant.price} —Ä—É–±. | –°–∫–ª–∞–¥: ${variant.stock}`);
        });
      });
    }

    // 6. –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∞–π—Ç–∞...');
    
    const settings = [
      { key: 'site_name', value: '–¢–µ–∫—Å—Ç–∏–ª—å –ö–æ–º–ø–ª–µ–∫—Å' },
      { key: 'site_description', value: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –æ—Ñ–∏—Å–∞' },
      { key: 'contact_email', value: 'info@textil-complex.ru' },
      { key: 'contact_phone', value: '+7 (495) 123-45-67' },
      { key: 'address', value: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1' },
      { key: 'working_hours', value: '–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00' },
      { key: 'free_delivery_from', value: '5000' },
      { key: 'default_delivery_price', value: '500' }
    ];

    for (const setting of settings) {
      const existing = await prisma.setting.findUnique({
        where: { key: setting.key }
      });

      if (!existing) {
        await prisma.setting.create({
          data: setting
        });
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: ${setting.key}`);
      }
    }

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://localhost:3000/admin');
    console.log('3. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin@textil-complex.ru / admin123');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–¢–æ–≤–∞—Ä—ã"');
    console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupAdminAndImport();